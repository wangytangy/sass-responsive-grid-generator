section {
  width: 900px;
  margin: 0 auto;

  h1 {
    text-align: center;
    font-family: sans-serif;
  }
}


.group {
  content: "";
  clear: both;
  display: block;
}



@mixin imagegrid($column-num, $margin) {
  // $column-num is number of columns that we want
  // $margin is the amount of margin between each panel that we want

  /** we need to calculate the WIDTH of each individual panel

    1) Each panel's width will be:
      the width of the entire grid MINUS the sum of all inner margins divided by the number of panels

    for example:
      If the grid is 900px wide and we want 5 panels per row with a 1% margin between them
      we call the mixin function with arguments: 5 and 1%:

      Each panel's width is:
        900px - ((5 - 1) * 1%) => 864px (accounts for all the space we need for inner margins)
        864px / 5 (the left over width must be divided by the number of panels we want)
        => 172.8px

      Each panel have a width of 172.8px

      In total, the panels and inner margins will add up to 900px and
      left and right sides will line up perfectly against edges of container
  **/

  width: ((100% - (($column-num - 1) * $margin)) / $column-num);


  // Now we need to calulate the margin for each panel
  // Give every panel a bottom and right margin
  &:nth-child(n) {
    margin-bottom: $margin;
    margin-right: $margin;
  }

  /**
    HOWEVER! For each row, the last panel must have no margins.
    Or else the last panel will take up too much space and get pushed
    to the next line.

    We need to select every last panel on each row and set margin to 0.
    For example, if we have 12 panels with 4 columns (4 per row)...
    we select every 4n panel and set margin to 0
  **/
  &:nth-child(#{$column-num}n) {
    margin-bottom: 0;
    margin-right: 0;
  }
}


.grid {

  .panel {
    @include imagegrid(5, 1%);
    float: left;

    img {
      display: block;
      max-width: 100%
    }
  }

}
